name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"

jobs:
  release:
    runs-on: macos-15
    if: "!contains(github.event.head_commit.message, 'skipci')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List available Xcode versions
        run: ls -la /Applications/ | grep Xcode

      - name: Select Xcode version
        run: |
          # Try to use the newest available Xcode version
          if [ -d "/Applications/Xcode_16.1.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          elif [ -d "/Applications/Xcode_16.0.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
          elif [ -d "/Applications/Xcode_15.4.app" ]; then
            sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          else
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          fi

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-derived-data-

      - name: Build app
        run: |
          xcodebuild -project Appresize.xcodeproj \
                     -scheme Appresize \
                     -configuration Release \
                     -derivedDataPath build \
                     build

      - name: Show build products
        run: |
          echo "Build products:"
          find build -name "*.app" -type d
          ls -la build/Build/Products/Release/

      - name: Create DMG
        run: |
          # Create a temporary directory for DMG contents
          mkdir -p dmg-staging

          # Copy the app to staging directory
          cp -R "build/Build/Products/Release/Appresize.app" dmg-staging/

          # Create Applications symlink
          ln -s /Applications dmg-staging/Applications

          # Get version from tag or input
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi

          # Create DMG
          hdiutil create -volname "Appresize $VERSION" \
                         -srcfolder dmg-staging \
                         -ov -format UDZO \
                         "Appresize-$VERSION.dmg"

          # Verify DMG was created
          ls -la Appresize-*.dmg

      - name: Sign DMG (if certificates available)
        if: env.APPLE_CERTIFICATE_DATA != ''
        env:
          APPLE_CERTIFICATE_DATA: ${{ secrets.APPLE_CERTIFICATE_DATA }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # This would handle code signing if certificates are provided
          echo "Code signing would happen here if certificates were configured"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: appresize-build
          path: |
            Appresize-*.dmg
            build/Build/Products/Release/Appresize.app

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            Appresize-*.dmg
          body: |
            ## Changes

            See the [commit history](/${{ github.repository }}/commits/${{ github.ref_name }}) for details.

            ## Installation

            1. Download the DMG file below
            2. Open the DMG and drag Appresize to your Applications folder
            3. Launch Appresize from Applications
            4. Grant accessibility permissions when prompted in System Preferences

            ## Requirements

            - macOS 10.15 or later
            - Accessibility permissions for window manipulation
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Manual Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          files: |
            Appresize-*.dmg
          body: |
            ## Changes

            Manual release of Appresize ${{ github.event.inputs.version }}

            ## Installation

            1. Download the DMG file below
            2. Open the DMG and drag Appresize to your Applications folder
            3. Launch Appresize from Applications
            4. Grant accessibility permissions when prompted in System Preferences

            ## Requirements

            - macOS 10.15 or later
            - Accessibility permissions for window manipulation
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
